// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

   //Zero x input
   Mux16(a=x, b[0..15]=false, sel=zx, out=x1);

   //Negate x input
   Not16(in=x1, out=notx);
   Mux16(a=x1, b=notx, sel=nx, out=x2);

   //Zero y input
   Mux16(a=y, b[0..15]=false, sel=zy, out=y1);

   //Negate y input
   Not16(in=y1, out=noty);
   Mux16(a=y1, b=noty, sel=ny, out=y2);

   //Apply opcode
   Add16(a=x2, b=y2, out=addoutput);
   And16(a=x2, b=y2, out=andoutput);
   Mux16(a=andoutput, b=addoutput, sel=f, out=opout);

   //Negate output
   Not16(in=opout, out=notout);
   Mux16(a=opout, b=notout, sel=no, out=out);

   //Check for zr
   Or(a=out[0], b=out[1], out=o1);
   Or(a=out[2], b=out[3], out=o2);
   Or(a=out[4], b=out[5], out=o3);
   Or(a=out[6], b=out[7], out=o4);
   Or(a=out[8], b=out[9], out=o5);
   Or(a=out[10], b=out[11], out=o6);
   Or(a=out[12], b=out[13], out=o7);
   Or(a=out[14], b=out[15], out=o8);

   Or(a=o1, b=o2, out=o9);
   Or(a=o3, b=o4, out=o10);
   Or(a=o5, b=o6, out=o11);
   Or(a=o7, b=o8, out=o12);
   Or(a=o9, b=o10, out=o13);
   Or(a=o11, b=o12, out=o14);
   Or(a=o13, b=o14, out=zr);


   And(a=out[15], b=false, out=ng);
}
